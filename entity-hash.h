/* ANSI-C code produced by gperf version 3.0.3 */
/* Command-line: gperf -L ANSI-C -c -C -F ', 0' -H entity_hash -N entity_lookup -t -m 20  */
/* Computed positions: -k'1-3,$' */

#if !((' ' == 32) && ('!' == 33) && ('"' == 34) && ('#' == 35) \
      && ('%' == 37) && ('&' == 38) && ('\'' == 39) && ('(' == 40) \
      && (')' == 41) && ('*' == 42) && ('+' == 43) && (',' == 44) \
      && ('-' == 45) && ('.' == 46) && ('/' == 47) && ('0' == 48) \
      && ('1' == 49) && ('2' == 50) && ('3' == 51) && ('4' == 52) \
      && ('5' == 53) && ('6' == 54) && ('7' == 55) && ('8' == 56) \
      && ('9' == 57) && (':' == 58) && (';' == 59) && ('<' == 60) \
      && ('=' == 61) && ('>' == 62) && ('?' == 63) && ('A' == 65) \
      && ('B' == 66) && ('C' == 67) && ('D' == 68) && ('E' == 69) \
      && ('F' == 70) && ('G' == 71) && ('H' == 72) && ('I' == 73) \
      && ('J' == 74) && ('K' == 75) && ('L' == 76) && ('M' == 77) \
      && ('N' == 78) && ('O' == 79) && ('P' == 80) && ('Q' == 81) \
      && ('R' == 82) && ('S' == 83) && ('T' == 84) && ('U' == 85) \
      && ('V' == 86) && ('W' == 87) && ('X' == 88) && ('Y' == 89) \
      && ('Z' == 90) && ('[' == 91) && ('\\' == 92) && (']' == 93) \
      && ('^' == 94) && ('_' == 95) && ('a' == 97) && ('b' == 98) \
      && ('c' == 99) && ('d' == 100) && ('e' == 101) && ('f' == 102) \
      && ('g' == 103) && ('h' == 104) && ('i' == 105) && ('j' == 106) \
      && ('k' == 107) && ('l' == 108) && ('m' == 109) && ('n' == 110) \
      && ('o' == 111) && ('p' == 112) && ('q' == 113) && ('r' == 114) \
      && ('s' == 115) && ('t' == 116) && ('u' == 117) && ('v' == 118) \
      && ('w' == 119) && ('x' == 120) && ('y' == 121) && ('z' == 122) \
      && ('{' == 123) && ('|' == 124) && ('}' == 125) && ('~' == 126))
/* The character set is not based on ISO-646.  */
#error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gnu-gperf@gnu.org>."
#endif

struct entity_ptr { const char *name; int id; };

#define TOTAL_KEYWORDS 203
#define MIN_WORD_LENGTH 2
#define MAX_WORD_LENGTH 13
#define MIN_HASH_VALUE 24
#define MAX_HASH_VALUE 367
/* maximum key range = 344, duplicates = 0 */

#ifdef __GNUC__
__inline
#else
#ifdef __cplusplus
inline
#endif
#endif
static unsigned int
entity_hash (register const char *str, register unsigned int len)
{
  static const unsigned short asso_values[] =
    {
      368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
      368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
      368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
      368, 368, 368,  10, 368,   7, 368, 368, 368, 368,
      368, 368, 368,  41, 368, 368, 368, 368,  15,  23,
        9,   9,   8,  29,   6,   6,  13,   9,   6, 368,
      368, 368, 368, 368, 368,  53,  28,   8,  11,   9,
      368,  51,  46,  10, 368, 368,  45, 368, 368,  29,
       18, 368,  15,  14,  18,  39, 368, 368,   6, 368,
      119, 368, 368, 368, 368, 368, 368,   6,  13,  46,
       12,   7,  40, 115, 144,   8, 102,  40,  48,  22,
       41,  65,   8,  10,  77,  63,  19,  34,   7,  96,
        7,  10, 106, 368, 368, 368, 368, 368, 368, 368,
      368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
      368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
      368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
      368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
      368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
      368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
      368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
      368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
      368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
      368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
      368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
      368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
      368, 368, 368, 368, 368, 368, 368
    };
  register int hval = len;

  switch (hval)
    {
      default:
        hval += asso_values[(unsigned char)str[2]+1];
      /*FALLTHROUGH*/
      case 2:
        hval += asso_values[(unsigned char)str[1]];
      /*FALLTHROUGH*/
      case 1:
        hval += asso_values[(unsigned char)str[0]];
        break;
    }
  return hval + asso_values[(unsigned char)str[len - 1]];
}

#ifdef __GNUC__
__inline
#ifdef __GNUC_STDC_INLINE__
__attribute__ ((__gnu_inline__))
#endif
#endif
const struct entity_ptr *
entity_lookup (register const char *str, register unsigned int len)
{
  static const struct entity_ptr wordlist[] =
    {
      {"", 0}, {"", 0}, {"", 0}, {"", 0}, {"", 0}, {"", 0},
      {"", 0}, {"", 0}, {"", 0}, {"", 0}, {"", 0}, {"", 0},
      {"", 0}, {"", 0}, {"", 0}, {"", 0}, {"", 0}, {"", 0},
      {"", 0}, {"", 0}, {"", 0}, {"", 0}, {"", 0}, {"", 0},
      {"Xi", 97},
      {"xi", 119},
      {"pi", 120},
      {"", 0}, {"", 0}, {"", 0}, {"", 0}, {"", 0},
      {"##37", 1},
      {"pause", 155},
      {"#62", 4},
      {"##9553", 172},
      {"Pi", 98},
      {"aacute", 27},
      {"eacute", 33},
      {"iacute", 37},
      {"Eacute", 22},
      {"yacute", 48},
      {"##1098", 129},
      {"#8219", 159},
      {"##1100", 131},
      {"Sacute", 71},
      {"epsi", 109},
      {"ddotbl.x", 134},
      {"eta", 112},
      {"amp", 3},
      {"edot", 57},
      {"Delta", 93},
      {"delta", 108},
      {"#!0,127", 179},
      {"tdotbl.x", 147},
      {"mdot.x", 140},
      {"bdot", 133},
      {"amacrac.x", 188},
      {"emacrac.x", 135},
      {"diam", 174},
      {"imacrtilde", 194},
      {"tilde", 89},
      {"middot", 15},
      {"dmacrbl.x", 191},
      {"beta", 106},
      {"uacute", 45},
      {"quotup", 184},
      {"kappa", 115},
      {"Tau", 100},
      {"tau", 123},
      {"tmacrbl.x", 199},
      {"acute", 14},
      {"nacute", 66},
      {"upsi", 124},
      {"ndot.x", 141},
      {"alpha", 105},
      {"ndotbl.x", 143},
      {"cacute", 52},
      {"Upsi", 101},
      {"Beta", 91},
      {"acaron.x", 82},
      {"Hdotbl.x", 137},
      {"epsilon", 110},
      {"kdot", 196},
      {"Aacute", 18},
      {"nbsp", 9},
      {"umacrtilde", 200},
      {"bullb", 162},
      {"lt", 6},
      {"cdot", 53},
      {"nmacr.x", 197},
      {"IPA135", 86},
      {"mu", 117},
      {"s224", 180},
      {"sacute", 72},
      {"abreve", 50},
      {"oacute", 41},
      {"Hmacrbl.x", 186},
      {"sdotbl.x", 146},
      {"iumlacute", 139},
      {"part", 168},
      {"diams", 183},
      {"Omega", 104},
      {"percnt", 2},
      {"Lambda", 96},
      {"sect", 10},
      {"uibrevebl.x", 202},
      {"lambda", 116},
      {"ucaron.x", 83},
      {"Gamma", 92},
      {"bvec", 190},
      {"nu", 118},
      {"rdotbl.x", 145},
      {"ecaron", 59},
      {"s225", 176},
      {"ndotbl", 142},
      {"omacrac.x", 144},
      {"iota", 114},
      {"eibrevebl", 192},
      {"iibrevebl", 195},
      {"Scaron", 74},
      {"macr", 12},
      {"Alpha", 90},
      {"amacr", 49},
      {"emacr", 56},
      {"imacr", 63},
      {"Emacr", 55},
      {"Imacr", 62},
      {"s241", 178},
      {"larroa", 189},
      {"", 0},
      {"schwa.x", 85},
      {"permil", 164},
      {"auml", 30},
      {"euml", 35},
      {"iuml", 39},
      {"times", 24},
      {"+vector+", 203},
      {"omega", 127},
      {"wdot", 148},
      {"atilde", 29},
      {"zdotbl.x", 149},
      {"itilde", 61},
      {"etilde.x", 150},
      {"frac34", 17},
      {"uibrevebl", 201},
      {"Omacr", 68},
      {"atildeacute.x", 187},
      {"Ccedil", 21},
      {"zdot", 80},
      {"", 0},
      {"umacr", 77},
      {"ccaron", 54},
      {"", 0},
      {"quotlw", 185},
      {"gt", 5},
      {"Ouml", 23},
      {"zeta", 111},
      {"gdot", 60},
      {"sqrt", 170},
      {"verbar", 8},
      {"uuml", 47},
      {"Zdot", 79},
      {"minus", 169},
      {"gmacr.x", 136},
      {"Rarr", 167},
      {"Uuml", 25},
      {"circ", 88},
      {"utilde", 76},
      {"scaron", 75},
      {"Zeta", 94},
      {"", 0}, {"", 0},
      {"gamma", 107},
      {"", 0},
      {"ntilde", 40},
      {"star", 182},
      {"Sigma", 99},
      {"", 0},
      {"hdotbl.x", 138},
      {"Auml", 19},
      {"", 0},
      {"omacr", 69},
      {"rcaron", 70},
      {"psi", 126},
      {"dash", 151},
      {"ccedil", 31},
      {"hellip", 163},
      {"", 0},
      {"gcaron.x", 84},
      {"strok", 65},
      {"lstrok", 64},
      {"ouml", 43},
      {"", 0},
      {"Psi", 103},
      {"hmacrbl.x", 193},
      {"mdash", 154},
      {"agrave", 26},
      {"egrave", 32},
      {"igrave", 36},
      {"", 0},
      {"laquo", 11},
      {"dolnagw", 181},
      {"scedil", 73},
      {"", 0},
      {"acirc", 28},
      {"ecirc", 34},
      {"icirc", 38},
      {"hfpause", 153},
      {"Prime", 165},
      {"infin", 171},
      {"", 0},
      {"zcaron", 81},
      {"Theta", 95},
      {"theta", 113},
      {"ndash", 152},
      {"", 0},
      {"grave", 7},
      {"", 0}, {"", 0},
      {"ldquor", 161},
      {"or", 173},
      {"", 0}, {"", 0}, {"", 0},
      {"ugrave", 44},
      {"sigma", 122},
      {"rarr", 166},
      {"", 0},
      {"hardcy", 130},
      {"raquo", 16},
      {"", 0}, {"", 0},
      {"ucirc", 46},
      {"", 0}, {"", 0},
      {"rdquo", 160},
      {"", 0},
      {"lang", 175},
      {"", 0}, {"", 0}, {"", 0}, {"", 0}, {"", 0}, {"", 0},
      {"", 0}, {"", 0}, {"", 0}, {"", 0}, {"", 0}, {"", 0},
      {"", 0}, {"", 0}, {"", 0}, {"", 0}, {"", 0}, {"", 0},
      {"", 0},
      {"lsquo", 156},
      {"softcy", 132},
      {"", 0},
      {"aogon", 51},
      {"eogon", 58},
      {"", 0},
      {"ocirc", 42},
      {"phiv", 128},
      {"", 0},
      {"rang", 177},
      {"", 0}, {"", 0}, {"", 0},
      {"lsquor", 158},
      {"rringbl.x", 198},
      {"", 0}, {"", 0},
      {"Phi", 102},
      {"", 0}, {"", 0}, {"", 0}, {"", 0}, {"", 0},
      {"deg", 13},
      {"", 0}, {"", 0}, {"", 0}, {"", 0}, {"", 0},
      {"rsquo", 157},
      {"", 0}, {"", 0}, {"", 0}, {"", 0}, {"", 0}, {"", 0},
      {"", 0},
      {"wcirc", 78},
      {"", 0},
      {"rho", 121},
      {"", 0}, {"", 0}, {"", 0}, {"", 0}, {"", 0},
      {"chi", 125},
      {"", 0}, {"", 0}, {"", 0}, {"", 0}, {"", 0}, {"", 0},
      {"eng", 67},
      {"", 0}, {"", 0}, {"", 0}, {"", 0}, {"", 0}, {"", 0},
      {"", 0}, {"", 0}, {"", 0}, {"", 0}, {"", 0}, {"", 0},
      {"", 0}, {"", 0}, {"", 0}, {"", 0}, {"", 0}, {"", 0},
      {"", 0}, {"", 0}, {"", 0}, {"", 0}, {"", 0}, {"", 0},
      {"", 0}, {"", 0}, {"", 0}, {"", 0}, {"", 0}, {"", 0},
      {"", 0}, {"", 0}, {"", 0}, {"", 0}, {"", 0}, {"", 0},
      {"", 0}, {"", 0}, {"", 0}, {"", 0}, {"", 0},
      {"Aring", 20},
      {"", 0}, {"", 0}, {"", 0}, {"", 0}, {"", 0}, {"", 0},
      {"", 0}, {"", 0}, {"", 0}, {"", 0}, {"", 0}, {"", 0},
      {"", 0}, {"", 0},
      {"yogh", 87}
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      register int key = entity_hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= 0)
        {
          register const char *s = wordlist[key].name;

          if (*str == *s && !strncmp (str + 1, s + 1, len - 1) && s[len] == '\0')
            return &wordlist[key];
        }
    }
  return 0;
}
